//*****************************************************************
// File:   clike.jj
// Author: Wozniak, Dorian Boleslaw (817570@unizar.es)
// Author: Jaime Royo, Oscar (818961@unizar.es)
// Date:   15/03/2023
// Coms:   compilar mediante "ant"
//*****************************************************************

options {
    IGNORE_CASE = false;
    COMMON_TOKEN_ACTION = false;
    // DEBUG_PARSER = true;
    // ERROR_REPORTING = false;
}

PARSER_BEGIN(clike)

package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;

public class clike {

    // Lista de palabras reservadas conocidas
    private String[] palabrasReservadas = {
        "void",
        "int",
        "bool",
        "char",

        "if",
        "else",
        "while",
        "return",

        "print",
        "print_ln",
        "read",
        "read_ln",
        "int2char",
        "char2int"
    }

    // Tabla de símbolos con las palabras reservadas ya incluidas
    public static SymbolTable st = new SymbolTable(palabrasReservadas);


    public static void main(String[] args) {
        clike parser = null;
        
        try {
            // Si no se suministra un fichero, se lee de entrada estandar
            if (args.length == 0) {
                parser = new clike(System.in);
            } else {
                parser = new clike(new java.io.FileInputStream(args[0]));
            }

            //Programa es el símbolo inicial de la gramática
            parser.Programa();

            System.out.println("***** Análisis terminado con éxito *****");

        } catch (java.io.FileNotFoundException e) {
            System.err.println ("Fichero " + args[0] + " no encontrado.");
        } catch (TokenMgrError e) {
            System.err.println("ERROR LÉXICO: " + e.getMessage());
        } catch (ParseException e) {
            System.err.println("PARSER_ERROR: " + e.getMessage());
        }
    }
}

PARSER_END(clike)


/* ***** ANALIZADOR LÉXICO ***** */

// Tokens internos
TOKEN : {
    < #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
}

// Tokens generados
TOKEN : {

    /* --- PALABRAS RESERVADAS --- */

    // Tipos de datos básicos
    < tBOOL: "bool" >

|	< tCHAR: "char" >

| 	< tINT: "int" >

|	< tVOID: "void" >

    // Condicionales
| 	< tIF: "if"> 
    
|	< tELSE: "else" >

    // Bucles	
| 	< tWHILE : "while" >

    // Regreso
| 	< tRETURN : "return">

    /* --- DELIMITADORES --- */

    // Paréntesis (guardas if/while, parametros funciones, expresiones...)
|	< tPAREN_INI: "(" >

|	< tPAREN_FIN : ")" >

    // Llaves (delimitadores bloques)
| 	< tLLAVE_INI : "{" >

| 	< tLLAVE_FIN : "}" >

    // Corchetes (vectores)
| 	< tCORCH_INI : "[" >

| 	< tCORCH_FIN : "]" >

    // Separador de variables 
|	< tCOMA : "," > 
    
    // Fin de órden
|	< tPUNTO_COMA : ";" > 
    
    /* --- OPERADORES --- */

    // Asignación
|	< tASIGNAR : "=" > 
    
    // Aritmética
|	< tSUMA : "+" >

|	< tRESTA : "-" >

|	< tMULTI : "*" >

|	< tDIV : "/" >

|	< tMODULO : "%" >

    // Lógica 
|	< tMAYOR : ">" >

|	< tMENOR : "<" >

|	< tMAYOR_IGUAL: ">=" >

|	< tMENOR_IGUAL : "<=" >

|	< tIGUAL : "==" >

|	< tDISTINTO : "!=" >

| 	< tAND : "&&" >

| 	< tOR : "||" >

| 	< tNOT : "!" >

    // Referencia
|	< tAMPERSAND : "&" >

    /* --- FUNCIONES INTEGRADAS --- */

|	< tPRINT : "print" >

|	< tPRINT_LN : "print_ln" >

|	< tREAD : "read" >

|	< tREAD_LN : "read_ln" >

|	< tINT2CHAR : "int2char" >

|	< tCHAR2INT : "char2int" >

    /* --- IDENTIFICADORES --- */

|	< tIDENTIFICADOR : ( < LETTER > | "_")( < LETTER > | < DIGIT > | "_" )* >

    /* --- CONSTANTES SIMBÓLICAS --- */

|	< tCONST_CHAR : "'"(~[])"'" >

|	< tCONST_STRING : "\""(~["\""] | "\"\"")*"\"" >

|	< tCONST_NUM : ((< DIGIT >)+ ) >

|	< tTRUE : "true" >

|	< tFALSE : "false" > 
}

// Expresiones a ignorar
SKIP : {
    " " | "\t" | "\n" 						// Espacios en blanco
    | <tCOMENTARIO : ("//"(~["\n"])*) > 	// Comentarios
}

/* ***** ANÁLISIS SINTÁCTICO ***** */

/* --- COMÚN --- */

// int char bool
void tipo() : {}
{
    <tINT> | <tCHAR> | <tBOOL>
}

void var_array() : {}
{
    <tCORCH_INI> expresion() <tCORCH_FIN>
}

// int/bool/char &? ident [n]?
void parametro() : {}
{
    tipo() ( <tAMPERSAND> )? <tIDENTIFICADOR> ( var_array() )?
}

// Lista de cero o más parámetros
void lista_parametros() : {}
{
    ( parametro() ( <tCOMA > parametro() )* )? 
}

// Contiene una lista de cero o más expresiones
void lista_expresiones() : {}
{
    ( lista_expresiones_cont() )?
}

// Contiene una lista de una o más expresiones
void lista_expresiones_cont() : {}
{
    expresion() (<tCOMA> expresion())*
}

// Una guarda para una condición
void guarda() : {}
{
    <tPAREN_INI> expresion() <tPAREN_FIN>
}

// Instrucciones dentro de una llave
void bloque_interior() : {}
{
    <tLLAVE_INI> ( instruccion() )* <tLLAVE_FIN>
}

// || &&
void operador_logico(): {}
{
    <tOR> | <tAND>
}

// == <> < <= > >=
void operador_relacional() : {} 
{
    <tIGUAL> | <tDISTINTO> | <tMENOR> | <tMENOR_IGUAL> | <tMAYOR> | <tMAYOR_IGUAL>
}

// + -
void operador_suma() : {}
{
    <tSUMA> | <tRESTA>
}

// * / %
void operador_multi() : {}
{
    <tMULTI> | <tDIV> | <tMODULO>
}

/* ---  PRODUCCIÓN INICIAL --- */
void Programa() : {}
{ 
    ( declaracion() )+ < EOF > 
}

/* --- DECLARACIONES --- */

// int/char/bool ident ... / void procedimiento
void declaracion() : {} 
{
    tipo() <tIDENTIFICADOR> declaracion_sig()               // Int/char/bool
|	< tVOID > < tIDENTIFICADOR > declaracion_proc_func()    // Void
}

// Desambigua en caso de variable global o función
void declaracion_sig() : {} 
{
    declaracion_variable()      // Variable
|   declaracion_proc_func()     // Función
}

// ...[n] ... ;
void declaracion_variable() : {}
{
    ( var_array() )? ( declaracion_variable_sig() )* <tPUNTO_COMA>
}

// , ident2[n], ident3[n], ...
void declaracion_variable_sig() : {}
{
    <tCOMA> <tIDENTIFICADOR> ( var_array() )?
}

// ... ( ... ) { ... }
void declaracion_proc_func() : {}
{
    <tPAREN_INI> lista_parametros() <tPAREN_FIN> bloque_interior()
}

/* --- INSTRUCCIONES --- */

void instruccion() : {}
{
    declaracion_variable_local()
|   una_instruccion() <tPUNTO_COMA>
|	bloque_condicional()
|   bloque_bucle()
}

void declaracion_variable_local() : {}
{
    tipo() <tIDENTIFICADOR> declaracion_variable()
}

// Instrucciones que no forman un bloque de código (acaban en ;)
void una_instruccion() : {}
{
    instruccion_integrada()
|   <tRETURN> expresion()                           // Return
|   <tIDENTIFICADOR> instr_asignacion_llamada()     // Asignación/llamada
}

// Desambigua si es una instrucción de asignación o de invocación
void instr_asignacion_llamada() : {}
{
    ( var_array() )?  <tASIGNAR> expresion()             // Asignación
|	<tPAREN_INI> lista_expresiones() <tPAREN_FIN>	// Llamada
}

// Instrucciones integradas
void instruccion_integrada() : {}
{
    instr_read()                                    // Funciones integradas
|   instr_read_ln()
|   instr_print()
|   instr_print_ln()
|   instr_int2char()
|   instr_char2int()       
}

void instr_read() : {}
{
    <tREAD> <tPAREN_INI> lista_expresiones_cont() <tPAREN_FIN> 
}

void instr_read_ln() : {}
{
    <tREAD_LN> <tPAREN_INI> lista_expresiones() <tPAREN_FIN> 
}

void instr_print() : {}
{
    <tPRINT> <tPAREN_INI> lista_expresiones_cont() <tPAREN_FIN> 
}

void instr_print_ln() : {}
{
    <tPRINT_LN> <tPAREN_INI> lista_expresiones() <tPAREN_FIN> 
}

void instr_int2char() : {}
{
    <tINT2CHAR> <tPAREN_INI> expresion() <tPAREN_FIN> 
}

void instr_char2int() : {}
{
    <tCHAR2INT> <tPAREN_INI> expresion() <tPAREN_FIN> 
}

/* --- INSTRUCCIONES BLOQUE --- */

// Un bloque de código condicional
void bloque_condicional() : {}
{
    <tIF> guarda() bloque_interior()	// Condición inicial
    ( <tELSE> bloque_interior() )?		// Puede continuar tras un else
}

// Un bloque de código en un búcle
void bloque_bucle() : {}
{
    <tWHILE> guarda() bloque_interior()
}

/* --- CÁLCULO DE EXPRESIONES --- */

// Expresión -> Prioridad 7
void expresion() : {}
{
    
    relacion_aritmetica() {

    }

|   relacion_aritmetica() ( relacion_logica() ) {
    
    }
}

// Relación lógica -> Prioridad 6 (comparaciones lógicas)
void relacion_logica() : {}
{
    ( operador_logico() relacion_aritmetica() )+
}

// Relación aritmética -> Prioridad 5 (comparaciones aritméticas)
void relacion_aritmetica() : {}
{
    expresion_simple() ( operador_relacional() expresion_simple() )?
}

// Expresión simple -> Prioridad 4 (suma/resta)
void expresion_simple() : {}
{
    ( operador_suma() )? termino() ( operador_suma() termino() )*
}

// Término -> Prioridad 3 (multiplicación/división/módulo)
void termino() :  {}
{
    factor() ( operador_multi() factor() )*
}

// Factor -> Prioridad 2 (negación)
void factor() : {}
{
    primario() 
|   <tNOT> primario()
}

// Primario -> Prioridad 1
void primario() : {
    Token t;
    SymbolInt s = null;
    int intVal;
    char charVal;
} {
    // Paréntesis
    <tPAREN_INI> val = expresion() <tPAREN_FIN>	{
        return val;
    }	

    // Constantes
|	<tCONST_NUM> {
        return Integer.parseInt(t.image);
    }

|	<tCONST_CHAR> {
        return t.image[0];
    }

|	<tCONST_STRING> {
        return t.image;
    }

|	<tTRUE> {
        return true;
    }

|	<tFALSE> {
        return false;
    }

|	charVal = instr_int2char() {
        return charVal;
    }

|	intVal = instr_char2int() {
        return intVal;
    }

    // Var, array, func
|	<tIDENTIFICADOR> primario_var_array_func() {
        
    }
}

// Desambigua en caso de ser variable, array o función
void primario_var_array_func() : {
    Token t;
    int val;
} {
    // Función
    <tPAREN_INI> lista_expresiones() <tPAREN_FIN> {

    }	

    // Elemento de array
|	<tCORCH_INI> expresion() <tCORCH_FIN>			

| 	/* Épsilon */ {
    
  } 								
}
