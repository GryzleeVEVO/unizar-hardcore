/* Generated By:JavaCC: Do not edit this line. clike.java */
package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import lib.errores.ErrorSemantico;

import java.util.ArrayList;

public class clike implements clikeConstants {

    // Lista de palabras reservadas
    private static String[] reservadas = {
        "INT",
        "BOOL",
        "CHAR",
        "VOID",

        "IF",
        "ELSE",
        "WHILE",

        "RETURN"
    };

    // Tabla de símbolos
    public static SymbolTable st = new SymbolTable(reservadas);

    public static void main(String[] args) {
        clike parser = null;

        try {
            if (args.length == 0) {
                parser = new clike(System.in);
            }
            else {
                parser = new clike(new java.io.FileInputStream(args[0]));
            }
            //Programa es el símbolo inicial de la gramática
            parser.Programa();
            System.out.println("***** An\u00e1lisis terminado con \u00e9xito *****");
        }
        catch (java.io.FileNotFoundException e) {
            System.err.println ("Fichero " + args[0] + " no encontrado.");
        }
        catch (TokenMgrError e) {
            System.err.println("ERROR L\u00c9XICO: " + e.getMessage());
        }
        catch (ParseException e) {
            System.err.println("PARSER_ERROR: " + e.getMessage());
        }
    }

/* ***** ANÁLISIS SINTÁCTICO ***** */

/* --- COMÚN --- */

// Devuelve el tipo de dato de una declaración/parámetro
  static final public Symbol.Types tipo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tINT:
      jj_consume_token(tINT);
              {if (true) return Symbol.Types.INT;}
      break;
    case tCHAR:
      jj_consume_token(tCHAR);
              {if (true) return Symbol.Types.CHAR;}
      break;
    case tBOOL:
      jj_consume_token(tBOOL);
              {if (true) return Symbol.Types.BOOL;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Devuelve el tamaño de la declaración de un vector
  static final public int array() throws ParseException {
    int size;
    jj_consume_token(tCORCH_INI);
    jj_consume_token(tCORCH_FIN);
        {if (true) return 3;}
    throw new Error("Missing return statement in function");
  }

// Crea un símbolo para un escalar/vector de nombre, tipo y clase dados
  static final public Symbol identificador(String name, Symbol.Types type, Symbol.ParameterClass pc) throws ParseException {
    int size;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tCORCH_INI:
      // Vectorial
          size = array();
        {if (true) return new SymbolArray(name, size, type, pc);}
      break;
    default:
      jj_la1[1] = jj_gen;
        Symbol s = null;

        switch (type) {
            case INT :  s = new SymbolInt(name, pc); break;
            case BOOL : s = new SymbolBool(name, pc); break;
            case CHAR : s = new SymbolChar(name, pc); break;
        }

        {if (true) return s;}
    }
    throw new Error("Missing return statement in function");
  }

// Genera un símbolo para una variable de una lista del tipo dado
  static final public void variable(Symbol.Types type) throws ParseException {
    Symbol s;
    Token t;
    jj_consume_token(tCOMA);
    t = jj_consume_token(tIDENTIFICADOR);
    s = identificador(t.image, type, Symbol.ParameterClass.NONE);
            try {
                st.insertSymbol(s);
            } catch (AlreadyDefinedSymbolException e) {
                ErrorSemantico.deteccion(e, t);
            }
  }

// Devuelve una lista de cero o mas parámetros
  static final public ArrayList<Symbol> lista_param() throws ParseException {
    ArrayList<Symbol> param = new ArrayList<Symbol>();
    Symbol s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tBOOL:
    case tCHAR:
    case tINT:
      s = parametro();
            param.add(s);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMA:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        jj_consume_token(tCOMA);
        s = parametro();
                param.add(s);
      }
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
        {if (true) return param;}
    throw new Error("Missing return statement in function");
  }

// Devuelve el símbolo de un parámetro por valor o referencia
  static final public Symbol parametro() throws ParseException {
    Symbol.Types type;
    Symbol s;
    type = tipo();
    s = parametro_val_ref(type);
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

// Desambigua y devuelve el símbolo de un parámetro por valor o referencia
  static final public Symbol parametro_val_ref(Symbol.Types type) throws ParseException {
    Symbol s;
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tAMPERSAND:
      jj_consume_token(tAMPERSAND);
      t = jj_consume_token(tIDENTIFICADOR);
      s = identificador(t.image, type, Symbol.ParameterClass.REF);
      break;
    case tIDENTIFICADOR:
      t = jj_consume_token(tIDENTIFICADOR);
      s = identificador(t.image, type, Symbol.ParameterClass.VAL);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

// // Contiene una lista de cero o más expresiones
// void lista_expresiones() : {}
// {
//     ( lista_expresiones_cont() )?
// }

// // Contiene una lista de una o más expresiones
// void lista_expresiones_cont() : {}
// {
//     expresion() (<tCOMA> expresion())*
// }

// // Una guarda para una condición
// void guarda() : {}
// {
//     <tPAREN_INI> expresion() <tPAREN_FIN>
// }

// // Instrucciones dentro de una llave
// void bloque_interior() : {}
// {
//     <tLLAVE_INI> ( instruccion() )* <tLLAVE_FIN>
// }

// // || &&
// void operador_logico(): {}
// {
//     <tOR> | <tAND>
// }

// // == <> < <= > >=
// void operador_relacional() : {} 
// {
//     <tIGUAL> | <tDISTINTO> | <tMENOR> | <tMENOR_IGUAL> | <tMAYOR> | <tMAYOR_IGUAL>
// }

// // + -
// void operador_suma() : {}
// {
//     <tSUMA> | <tRESTA>
// }

// // * / %
// void operador_multi() : {}
// {
//     <tMULTI> | <tDIV> | <tMODULO>
// }

/* ---  PRODUCCIÓN INICIAL --- */
  static final public void Programa() throws ParseException {
    label_2:
    while (true) {
      declaracion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case tBOOL:
      case tCHAR:
      case tINT:
      case tVOID:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
    }
    jj_consume_token(0);
  }

/* --- DECLARACIONES --- */

// Una declaración de variables/procedimientos/funciones
  static final public void declaracion() throws ParseException {
    Symbol.Types type;
    ArrayList<Symbol> param;
    Token t;
    Symbol s;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tBOOL:
    case tCHAR:
    case tINT:
      type = tipo();
      t = jj_consume_token(tIDENTIFICADOR);
      decl_var_fun(t, type);
      break;
    case tVOID:
      jj_consume_token(tVOID);
      t = jj_consume_token(tIDENTIFICADOR);
      jj_consume_token(tPAREN_INI);
      param = lista_param();
            s = new SymbolProcedure(t.image, param);

            try {
                st.insertSymbol(s);
            } catch (AlreadyDefinedSymbolException e) {
                ErrorSemantico.deteccion(e, t);
            }

            st.insertBlock();
      jj_consume_token(tPAREN_FIN);
      bloque();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      System.err.println(st.toString());
  }

  static final public void decl_var_fun(Token prev, Symbol.Types type) throws ParseException {
    Symbol s;
    Token t;
    ArrayList<Symbol> param;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tPAREN_INI:
      jj_consume_token(tPAREN_INI);
      param = lista_param();
      jj_consume_token(tPAREN_FIN);
            s = new SymbolFunction(prev.image, param, type);

            try {
                st.insertSymbol(s);
            } catch (AlreadyDefinedSymbolException e) {
                ErrorSemantico.deteccion(e, prev);
            }

            st.insertBlock();
      bloque();
      break;
    case tCORCH_INI:
    case tCOMA:
    case tPUNTO_COMA:
      s = identificador(prev.image, type, Symbol.ParameterClass.NONE);
            try {
                st.insertSymbol(s);
            } catch (AlreadyDefinedSymbolException e) {
                ErrorSemantico.deteccion(e, prev);
            }
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case tCOMA:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
        variable(type);
      }
      jj_consume_token(tPUNTO_COMA);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void bloque() throws ParseException {
    jj_consume_token(tLLAVE_INI);
    jj_consume_token(tLLAVE_FIN);
        st.removeBlock();
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public clikeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x38,0x8000,0x20000,0x38,0x0,0x78,0x78,0x20000,0x68800,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x204,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public clike(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public clike(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new clikeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public clike(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new clikeTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public clike(clikeTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(clikeTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
