


ARM Macro Assembler    Page 1 


    1 00000000                 AREA             codigo, CODE
    2 00000000         
    3 00000000                 IMPORT           conecta4_buscar_alineamiento_c
    4 00000000                 PRESERVE8        {TRUE}
    5 00000000         
    6 00000000                 EXPORT           conecta4_buscar_alineamiento_as
m
    7 00000000                 EXPORT           conecta4_hay_linea_asm_c
    8 00000000                 EXPORT           conecta4_hay_linea_asm_asm
    9 00000000         
   10 00000000         
   11 00000000         ;   Entrada:
   12 00000000         ;       r0 -> @cuadricula
   13 00000000         ;       r1 -> fila
   14 00000000         ;       r2 -> columna
   15 00000000         ;       r3 -> color
   16 00000000         ;       r11 + 4 -> *deltas_fila[i]
   17 00000000         ;       r11 + 8 -> *deltas_columna[i]
   18 00000000         ;
   19 00000000         ;   Salida
   20 00000000         ;       r0 <- longuitud linea
   21 00000000         ;
   22 00000000         ;   Descripción
   23 00000000         ;
   24 00000000         ;       Devuelve el número de celdas del mismo color co
                       nsecutivas en
   25 00000000         ;       la línea recta dada por delta_fila y delta_colu
                       mna a partir de 
   26 00000000         ;       cuadricula[fila][columna]
   27 00000000         
   28 00000000         conecta4_buscar_alineamiento_asm
   29 00000000         ; Prologo
   30 00000000 E1A0C00D        mov              r12, r13
   31 00000004 E92DDFF0        stmdb            r13!, { r4 - r10, r11, r12, r14
, r15 }
   32 00000008 E24CB004        sub              r11, r12, #4
   33 0000000C         
   34 0000000C         ;   Bloque de activación:
   35 0000000C         ;
   36 0000000C         ;   r13' ->  r4 - r10        buscar_alineamiento
   37 0000000C         ;           r11
   38 0000000C         ;           r13
   39 0000000C         ;           r14
   40 0000000C         ;   r11' ->  r15
   41 0000000C         ;           --------------
   42 0000000C         ;           delta_fila[i]   hay_linea
   43 0000000C         ;           delta_columna[i]
   44 0000000C         
   45 0000000C         ; Mueve parametros a registros variables
   46 0000000C E1A04000        mov              r4, r0      ; r4 = @cuadricula
   47 00000010 E1A05001        mov              r5, r1      ; r5 = fila
   48 00000014 E1A06002        mov              r6, r2      ; r6 = columna
   49 00000018 E1A07003        mov              r7, r3      ; r7 = color
   50 0000001C E28B9004        add              r9, r11, #0x04 ; Calcula @ base
                                                             de parametros
   51 00000020 E8990300        ldmia            r9, { r8 - r9 } ; r8, r9 = delt
                                                            a_columna, delta_fi
                                                            la
   52 00000024         



ARM Macro Assembler    Page 2 


   53 00000024 E3A00000        mov              r0, #0      ; Devolverá 0 si n
                                                            o supera los condic
                                                            ionales
   54 00000028         
   55 00000028         ; if
   56 00000028         ;   !C4_fila_valida(fila) (! 1 <= fila <= NUM_FILAS)
   57 00000028 E3550001        cmp              r5, #1
   58 0000002C BA000014        blt              ba_return_zero
   59 00000030 E3550000        cmp              r5, #NUM_FILAS
   60 00000034 CA000012        bgt              ba_return_zero
   61 00000038         
   62 00000038         ;   !C4_columna_valida(columna)) (! 1 <= columna <= NUM_
                       COLUMNAS)
   63 00000038 E3560001        cmp              r6, #1
   64 0000003C BA000010        blt              ba_return_zero
   65 00000040 E3560000        cmp              r6, #NUM_COLUMNAS
   66 00000044 CA00000E        bgt              ba_return_zero
   67 00000048         
   68 00000048         
   69 00000048         ;   Obtiene valor de celda en cuadricula[fila][columna]
   70 00000048 E084A185        add              r10, r4, r5, lsl #3 ; r10 = @cu
                                                            adricula[fila][0] (
                                                            @cuad + 8 * filas)
   71 0000004C E7DAA006        ldrb             r10, [r10, r6] ; r10 = *cuadric
                                                            ula[fila][columna]
   72 00000050         
   73 00000050         ;   celda_vacia(cuadricula[fila][columna]) ( celda & 0x0
                       4 == 0)
   74 00000050         
   75 00000050 E20A3000        and              r3, r10, #CELDA_VACIA
   76 00000054 E3530000        cmp              r3, #0
   77 00000058 0A000009        beq              ba_return_zero
   78 0000005C         
   79 0000005C         ;   celda_color(cuadricula[fila][columna] != ) ( celda &
                        0x03 != color)
   80 0000005C E20A3000        and              r3, r10, #CELDA_COLOR
   81 00000060 E1530007        cmp              r3, r7
   82 00000064 1A000006        bne              ba_return_zero
   83 00000068         
   84 00000068         
   85 00000068         ; Prepara llamada recursiva
   86 00000068 E1A00004        mov              r0, r4
   87 0000006C E0851008        add              r1, r5, r8  ; Avanza índices
   88 00000070 E0862009        add              r2, r6, r9
   89 00000074 E1A03007        mov              r3, r7
   90 00000078 E92D0300        stmdb            r13!, { r8 - r9 }
   91 0000007C         
   92 0000007C EBFFFFFE        bl               conecta4_buscar_alineamiento_as
m
   93 00000080         
   94 00000080         ; Obtiene resultado y regresa
   95 00000080 E2800001        add              r0, r0, #1
   96 00000084         
   97 00000084 E91BAFF0 
                       ba_return_zero
                               ldmdb            r11, { r4 - r10, r11, r13, r15 
}
   98 00000088         
   99 00000088         



ARM Macro Assembler    Page 3 


  100 00000088         ;   Entrada:
  101 00000088         ;       r0 -> @cuadricula
  102 00000088         ;       r1 -> fila
  103 00000088         ;       r2 -> columna
  104 00000088         ;       r3 -> color
  105 00000088         ;
  106 00000088         ;   Salida
  107 00000088         ;       r0 <- >= 1 si hay linea, 0 si no hay linea
  108 00000088         ;
  109 00000088         ;   Descrir15ión
  110 00000088         ;
  111 00000088         ;    
  112 00000088         
  113 00000088         conecta4_hay_linea_asm_c
  114 00000088         ; Prologo
  115 00000088 E1A0C00D        mov              r12, r13
  116 0000008C E92DDFF0        stmdb            r13!, { r4 - r10, r11, r12, r14
, r15 }
  117 00000090 E24CB004        sub              r11, r12, #4
  118 00000094         
  119 00000094         ;   Bloque de activación:
  120 00000094         ;
  121 00000094         ;   r13' ->  r4 - r10        hay_linea
  122 00000094         ;           r11
  123 00000094         ;           r13
  124 00000094         ;           r14
  125 00000094         ;   r11' ->  r15
  126 00000094         ;           --------------
  127 00000094         ;                           C4_verificar_4_en_linea
  128 00000094         
  129 00000094         ; Mueve parametros a registros variables
  130 00000094 E1A04000        mov              r4, r0      ; r4 = @cuadricula
  131 00000098 E1A05001        mov              r5, r1      ; r5 = fila
  132 0000009C E1A06002        mov              r6, r2      ; r6 = columna
  133 000000A0 E1A07003        mov              r7, r3      ; r7 = color
  134 000000A4         
  135 000000A4         ; Inicializa variables
  136 000000A4 E3A08000        mov              r8, #0      ; i              
  137 000000A8 E3A09000        mov              r9, #0      ; linea
  138 000000AC E3A0A000        mov              r10, #0     ; long_linea
  139 000000B0         
  140 000000B0         ; for()
  141 000000B0         ;   i < 4
  142 000000B0 E3580004 
                       hl1_for cmp              r8, #4
  143 000000B4 AA00001D        bge              hl1_return
  144 000000B8         ;   linea == FALSE
  145 000000B8 E3590000        cmp              r9, #FALSE
  146 000000BC 1A00001B        bne              hl1_return
  147 000000C0         
  148 000000C0         ;   Obtiene deltas[i]
  149 000000C0         
  150 000000C0 E3A00000        LDR              r0, =deltas_fila
  151 000000C4 E19000D8        ldrsb            r0, [r0, r8]
  152 000000C8 E3A01000        LDR              r1, =deltas_columna
  153 000000CC E19110D8        ldrsb            r1, [r1, r8]
  154 000000D0         
  155 000000D0         ;   Prepara primera llamada a buscar_alineamiento
  156 000000D0         



ARM Macro Assembler    Page 4 


  157 000000D0 E92D0003        stmdb            r13!, {r0, r1}
  158 000000D4 E1A00004        mov              r0, r4
  159 000000D8 E1A01005        mov              r1, r5
  160 000000DC E1A02006        mov              r2, r6
  161 000000E0 E1A03007        mov              r3, r7
  162 000000E4         
  163 000000E4 EBFFFFFE        bl               conecta4_buscar_alineamiento_c
  164 000000E8         
  165 000000E8         ;   linea = long_linea >= 4
  166 000000E8 E1A0A000        mov              r10, r0
  167 000000EC E35A0004        cmp              r10, #4
  168 000000F0 A3A09000        movge            r9, #TRUE
  169 000000F4 AAFFFFED        bge              hl1_for
  170 000000F8         
  171 000000F8         ;   Prepara segunda llamada a buscar_alineamiento
  172 000000F8         
  173 000000F8         ;   Recupera y niega deltas
  174 000000F8 E8BD0009        ldmia            r13!, { r0, r3 }
  175 000000FC E2600000        rsb              r0, r0, #0
  176 00000100 E2633000        rsb              r3, r3, #0
  177 00000104         
  178 00000104         ;   fila - deltas_filas[i], columnas - deltas_columna[i]
                       
  179 00000104 E0851000        add              r1, r5, r0
  180 00000108 E0862003        add              r2, r6, r3
  181 0000010C         
  182 0000010C         ;   Apila -deltas
  183 0000010C E92D0009        stmdb            r13!, { r0, r3 }
  184 00000110         
  185 00000110         ; cuadricula y color
  186 00000110 E1A00004        mov              r0, r4
  187 00000114 E1A03007        mov              r3, r7
  188 00000118         
  189 00000118 EBFFFFFE        bl               conecta4_buscar_alineamiento_c
  190 0000011C         
  191 0000011C         ;   linea = long_linea >= 4
  192 0000011C E08AA000        add              r10, r10, r0
  193 00000120 E35A0004        cmp              r10, #4
  194 00000124 A3A09000        movge            r9, #TRUE
  195 00000128         
  196 00000128         ;   i++
  197 00000128 E2888001        add              r8, r8, #1
  198 0000012C         
  199 0000012C EAFFFFDF        b                hl1_for
  200 00000130         
  201 00000130 E1A00009 
                       hl1_return
                               mov              r0, r9
  202 00000134 E91BAFF0        ldmdb            r11, { r4 - r10, r11, r13, r15 
}
  203 00000138         
  204 00000138         
  205 00000138         
  206 00000138         conecta4_hay_linea_asm_asm
  207 00000138         ; Prologo
  208 00000138 E1A0C00D        mov              r12, r13
  209 0000013C E92DDFF0        stmdb            r13!, { r4 - r10, r11, r12, r14
, r15 }
  210 00000140 E24CB004        sub              r11, r12, #4



ARM Macro Assembler    Page 5 


  211 00000144         
  212 00000144         ;   Bloque de activación:
  213 00000144         ;
  214 00000144         ;   r13' ->  r4 - r10        hay_linea
  215 00000144         ;           r11
  216 00000144         ;           r13
  217 00000144         ;           r14
  218 00000144         ;   r11' ->  r15
  219 00000144         ;           --------------
  220 00000144         ;                           C4_verificar_4_en_linea
  221 00000144         
  222 00000144         ; Mueve parametros a registros variables
  223 00000144 E1A04000        mov              r4, r0      ; r4 = @cuadricula
  224 00000148 E1A05001        mov              r5, r1      ; r5 = fila
  225 0000014C E1A06002        mov              r6, r2      ; r6 = columna
  226 00000150 E1A07003        mov              r7, r3      ; r7 = color
  227 00000154         
  228 00000154         ; Inicializa variables
  229 00000154 E3A08000        mov              r8, #0      ; i              
  230 00000158 E3A09000        mov              r9, #0      ; linea
  231 0000015C E3A0A000        mov              r10, #0     ; long_linea
  232 00000160         
  233 00000160         ; for()
  234 00000160         ;   i < 4
  235 00000160 E3580004 
                       hl2_for cmp              r8, #4
  236 00000164 AA00001D        bge              hl2_return
  237 00000168         ;   linea == FALSE
  238 00000168 E3590000        cmp              r9, #FALSE
  239 0000016C 1A00001B        bne              hl2_return
  240 00000170         
  241 00000170         ;   Obtiene deltas[i]
  242 00000170         
  243 00000170 E3A00000        LDR              r0, =deltas_fila
  244 00000174 E19000D8        ldrsb            r0, [r0, r8]
  245 00000178 E3A01000        LDR              r1, =deltas_columna
  246 0000017C E19110D8        ldrsb            r1, [r1, r8]
  247 00000180         
  248 00000180         ;   Prepara primera llamada a buscar_alineamiento
  249 00000180         
  250 00000180 E92D0003        stmdb            r13!, {r0, r1}
  251 00000184 E1A00004        mov              r0, r4
  252 00000188 E1A01005        mov              r1, r5
  253 0000018C E1A02006        mov              r2, r6
  254 00000190 E1A03007        mov              r3, r7
  255 00000194         
  256 00000194 EBFFFFFE        bl               conecta4_buscar_alineamiento_as
m
  257 00000198         
  258 00000198         ;   linea = long_linea >= 4
  259 00000198 E1A0A000        mov              r10, r0
  260 0000019C E35A0004        cmp              r10, #4
  261 000001A0 A3A09000        movge            r9, #TRUE
  262 000001A4 AAFFFFED        bge              hl2_for
  263 000001A8         
  264 000001A8         ;   Prepara segunda llamada a buscar_alineamiento
  265 000001A8         
  266 000001A8         ;   Recupera y niega deltas
  267 000001A8 E8BD0009        ldmia            r13!, { r0, r3 }



ARM Macro Assembler    Page 6 


  268 000001AC E2600000        rsb              r0, r0, #0
  269 000001B0 E2633000        rsb              r3, r3, #0
  270 000001B4         
  271 000001B4         ;   fila - deltas_filas[i], columnas - deltas_columna[i]
                       
  272 000001B4 E0851000        add              r1, r5, r0
  273 000001B8 E0862003        add              r2, r6, r3
  274 000001BC         
  275 000001BC         ;   Apila -deltas
  276 000001BC E92D0009        stmdb            r13!, { r0, r3 }
  277 000001C0         
  278 000001C0         ; cuadricula y color
  279 000001C0 E1A00004        mov              r0, r4
  280 000001C4 E1A03007        mov              r3, r7
  281 000001C8         
  282 000001C8 EBFFFFFE        bl               conecta4_buscar_alineamiento_as
m
  283 000001CC         
  284 000001CC         ;   linea = long_linea >= 4
  285 000001CC E08AA000        add              r10, r10, r0
  286 000001D0 E35A0004        cmp              r10, #4
  287 000001D4 A3A09000        movge            r9, #TRUE
  288 000001D8         
  289 000001D8         ;   i++
  290 000001D8 E2888001        add              r8, r8, #1
  291 000001DC         
  292 000001DC EAFFFFDF        b                hl2_for
  293 000001E0         
  294 000001E0 E1A00009 
                       hl2_return
                               mov              r0, r9
  295 000001E4 E91BAFF0        ldmdb            r11, { r4 - r10, r11, r13, r15 
}
  296 000001E8         
  297 000001E8         
  298 000001E8         
  299 000001E8                 END
              00000000 
              00000000 
              00000000 
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\o
bjects\conecta4_ensamblador.d -o.\objects\conecta4_ensamblador.o -IC:\Keil_v5\A
RM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\INC\Philips --prede
fine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 526" --list=.\listings
\conecta4_ensamblador.lst conecta4_ensamblador.s
