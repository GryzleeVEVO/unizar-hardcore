Postes:             T = {0, 1, 2}
Discos:             n (> 0)             Mas pequeño (1) --> Mas grande (n)

Estados regulares   s = s_n...s_1,      s_k -> poste en el que se encuentra el disco k 
Transición          (disco, origen, destino)

Formato del texto:

graph nombre
{
    estado_ini -> estado_1(entrada),...,estado_n(entrada);
    estado_ini -> estado_f();
}

Gramática:

/* 
    Todo archivo debe comenzar de la forma "graph nombre { lista_reglas }" 
*/

grafo : GRAPH ID OB listaGrafo CB

/*
    lista_reglas puede estar vacía o contener múltiples reglas para crear el grafo
*/

listaGrafo : /* Vacío */
            | regla SEMICOLON listaGrafo

/*
    Una regla tiene dos lados: a la izquierda el nodo original, y a la derecha
    (separados por ->) los nodos destino con la entrada que realiza la transición
    entre paréntesis (unos paréntesis vacíos representan una entrada vacía)
*/

regla : NODE EDGEOP derecha

derecha : NODE edge COMMA derecha
        | NODE edge

edge: OP CP
    | OP INPUT CP



