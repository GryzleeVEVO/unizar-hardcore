NIP : 817570
Apellidos: Wozniak
Nombre: Dorian Boleslaw

Comentarios:

### DIFICULTADES ###

No se han encontrado mayores dificultades a la hora de realizar la practica. Entre problemas notables se encuentran:

* La creación de números aleatorios de un rango arbitrario, tanto enteros como reales, con rand()

* El paso por referencia de parámetros a procesos concurrentes

* La obtención de la fórmula de desviación típica

* El paso de archivos desde un ordenador conectado a hendrix mediante ssh (solucionado de forma cómoda en casa con sshfs)

* Los ordenadores del laboratorio

### EJERCICIO 1 ###

* Ambos programas inician tres procesos concurrentes que realizan, cada una, una tarea similar: 
 uno escribe en salida estandar "Soy Aurora" y espera 100 milisegundos dies veces;
 el segundo escribe "Soy Baltasar" y espera 150 quince veces; y el tercero "Soy Carmen", 300 cinco veces.

 Ambos programas realizan la misma tarea con un matiz en su implementación: V1 utiliza tres variables
 del tipo "thread" mientras que V2 utiliza un vector de threads, que puede resultar más cómodo para
 declarar e iniciar múltiples procesos concurrentes. No se diferencian en su comportamiento.

* En cuanto a su comportamiento, los tres procesos se ejecutan concurrentemente, transfiriendo el control a las
 otras durante las esperas. Las funciones "Aurora" y  "Carmen" son las primeras en acabar, con la función
 "Baltasar" siendo la última en terminar por tener más repeticiones. Al terminarse los otros dos procesos,
 al no haber otras funciones que atender, se puede observar la espera de 150ms de la segunda función.

* En programación concurrente, el operador concatenación ('+') y el operando de flujo de salida ("<<") no se
 comportan de la misma manera: la concatenación se comporta como una operación atómica y muestra la salida de
 forma correcta; sin embargo, concatenar con "<<" no lo es, y en varias ejecuciones se observa que se pueden
 solapar las escrituras de dos instancias diferentes.

* En cuanto a funciones de librería utilizadas:

	-std::this_thread::sleep_for(chrono::milliseconds(int))
	
	En esta orden, "std" es el espacio de nombre de las librerías estandar de C++; "this_thread" el de
	la librería "thread"; y "chrono" la de la librería homónima.

	sleep_for(): Función de la librería "chrono" que espera la cantidad de tiempo definida por 
	chrono::<duration>(int), donde <duration> es una unidad de tiempo, en este caso "milliseconds"

		 
	-thread <etiq>(&<función>, <param>): invoca un nuevo proceso concurrente identificado como <etiq> que
	realiza el proceseso <función>, pasando los argumentos <param>. Si se quiere pasar parámetros por
	referencia, se debe usar std::ref(<param>) para "envolver" el parámetro referenciado.

	-<etiq>.join(): espera hasta que el proceso se una, es decir, termine su ejecución.

### EJERCICIOS 2 Y 3 ###

Ficheros fuente: 

ejercicio_2.cpp
ejercicio_3.cpp

Se adjunta tambien un fichero Makefile que genera automaticamente los binarios de los ejercicios 2 y 3

Se puede compilar los ficheros con la siguiente orden:

$ make

Alternativamente, se puede compilar solo uno de los ejercicios con la siguiente orden:

$ make ejercicio_2	

$ make ejercicio_3

En caso alternativo, se puede compilar los ejercicios con las siguientes ordenes:

$ g++ ejercicio_2.cpp -o ejercicio_2 -std=c++11 -pthread

$ g++ ejercicio_3.cpp -o ejercicio_3 -std=c++11 -pthread

Todas las ordenes se deben ejecutar en el mismo directorio que los archivos fuente
y genera los ficheros binarios en la misma carpeta.


