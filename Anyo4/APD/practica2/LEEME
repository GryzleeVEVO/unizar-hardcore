Seral Gracia, Álvaro    819425@unizar.es    a819425
Wozniak, Dorian Boleslaw    817570@unizar.es   a817570

# Descripción

El programa implementado lee, a partir de un fichero, un cuadrado latino. Para
resolverlo, lo convierte a un problema de satisfactibilidad booleana (SAT)
convirtiendo el cuadrado en una serie de clausulas en forma normal conjuntiva
(CNF). Estas clausulas son las que se pasan al programa minisat, un programa
dedicado a resolver problemas SAT. EL resultado se procesa y se devuelve la
solución al problema original en un nuevo fichero.

Los cuadrados latinos se representan de la siguiente manera:

- Los valores que puede tomar son enteros en el rango [1..TAMAÑO_CUADRADO] o
    casilla en blanco (*)
- Los valores se separan por espacios en blanco. Aunque es recomendable, no
    es necesario que haya salto de línea para cada fila.

Un ejemplo de cuadrado latino de tamaño 3 sería el siguiente:

* * 2
1 * *
* 3 *

El cuadrado debe tener como mínimo un tamaño 2x2. Si faltan valores para el
cuadrado, el programa fallará. Igualmente, una vez lleno el cuadrado, la
lectura se detiene. El programa no se encarga de comprobar la corrección de la
entrada.

El programa si comprueba que la entrada sea resoluble y la salida sea correcta.

Cuando mas grande el cuadrado,mas complicado será resolverlo. Hay que tener en
cuenta que los problemas SAT son NP-completos, por lo que el tiempo de
ejecución puede aumentar rápidamente.

# Compilación y ejecución

Para compilarlo, se ha proporcionado un Makefile. Para compilarlo, basta con
ejecutar el siguiente comando:

    make

Para ejecutarlo, se debe ejecutar el siguiente comando:

    ./practica2 <tamaño_cuadrado> <fichero_entrada> [fichero_salida]

NOTA IMPORTANTE: Para integrar minisat con el programa, se ha ejecutado el
programa minisat desde nuestro programa en vez de la librería que ofrece. Para
que funcione, minisat debe estar instalado en el sistema y en la PATH.

Adicionalmente, se provee de un script de Python que genera cuadrados latinos
de cualquier tamaño para resolver. Se puede ejecutar de la siguiente manera:

    python3 generador.py <tamaño_cuadrado> <prob_casilla_en_blanco>
        <fichero_salida>

# Pruebas

Una batería de pruebas se encuentra en la carpeta test. Se subidividen en
pruebas de tamaño y de procentaje de casillas en blanco. El fichero
ejecutar2.sh ejecuta cada prueba y muestra los resultados por pantalla.

Para ejecutar las pruebas:

    ./ejecutar2.sh